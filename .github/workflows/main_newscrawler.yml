name: NewsRaag Crawler - Build and Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests before deployment (emergency only)'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  # Run comprehensive tests before deployment
  test-before-deploy:
    name: 🧪 Pre-Deployment Tests
    uses: ./.github/workflows/tests.yml
    if: github.event.inputs.skip_tests != 'true'
    secrets: inherit

  # Build application for deployment
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test-before-deploy
    if: always() && (needs.test-before-deploy.result == 'success' || github.event.inputs.skip_tests == 'true')
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create and activate virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
      
      - name: Upgrade pip and install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run final build verification
        run: |
          python -c "import crawler, monitoring, clients; print('✅ Core modules import successfully')"
          python -m pytest tests/test_basic_setup.py --tb=short --no-cov -v -x
        env:
          PYTHONPATH: .
        continue-on-error: false

      - name: Clean up build artifacts
        run: |
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + || true
          find . -name "*.pyo" -delete || true
          find . -name ".DS_Store" -delete || true
        
      - name: Create deployment package
        uses: actions/upload-artifact@v4
        with:
          name: newsraag-crawler-app
          path: |
            .
            !venv/
            !tests/
            !test_reports/
            !htmlcov/
            !.pytest_cache/
            !.git/
            !.github/
            !*.pyc
            !**/__pycache__/
          retention-days: 7

  # Deploy to Azure Web App
  deploy:
    name: 🚀 Deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    if: success()
    permissions:
      id-token: write
      contents: read

    environment:
      name: 'Production'
      url: 'https://newscrawler.azurewebsites.net'

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: newsraag-crawler-app

      - name: Verify deployment package
        run: |
          echo "📦 Deployment package contents:"
          ls -la
          echo ""
          echo "🔍 Checking for azure_startup.py..."
          if [ -f "azure_startup.py" ]; then
            echo "✅ azure_startup.py found"
            echo "📄 File size: $(stat -c%s azure_startup.py) bytes"
          else
            echo "❌ azure_startup.py NOT found!"
            echo "This will cause deployment to fail!"
            exit 1
          fi
          echo ""
          echo "📁 Key directories:"
          ls -la crawler/ monitoring/ clients/ || echo "Some directories may be missing"
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_C65F16397D534887B79C52BA051C4D59 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_A65604C5EBD94743B85BC85631C81C8E }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_528D6DED7A1A4438A48ED9AF0F1B99E0 }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'newscrawler'
          slot-name: 'Production'
          timeout: 600000
          restart: false

      - name: Wait for application startup
        run: |
          echo "⏳ Waiting for application to start..."
          sleep 45

      - name: Post-deployment health check
        run: |
          echo "🔍 Running post-deployment health check..."
          
          # Try multiple endpoints
          ENDPOINTS=(
            "https://newscrawler.azurewebsites.net/"
            "https://newscrawler.azurewebsites.net/health"
            "https://newscrawler.azurewebsites.net/api/health"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Testing: $endpoint"
            if curl -f -s --max-time 30 "$endpoint" > /dev/null 2>&1; then
              echo "✅ $endpoint is responding"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "⚠️ $endpoint not responding"
            fi
          done
          
          if [ "$HEALTH_CHECK_PASSED" = true ]; then
            echo "✅ Health check passed"
          else
            echo "⚠️ Health check failed - manual verification recommended"
          fi
        continue-on-error: true

  # Post-deployment notification and summary
  notification:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [test-before-deploy, build, deploy]
    if: always()
    
    steps:
    - name: Deployment status summary
      run: |
        echo "🎯 NewsRaag Crawler Deployment Summary"
        echo "======================================"
        echo ""
        echo "📊 Pipeline Results:"
        echo "  • Tests: ${{ needs.test-before-deploy.result != 'skipped' && needs.test-before-deploy.result || 'skipped' }}"
        echo "  • Build: ${{ needs.build.result }}"
        echo "  • Deploy: ${{ needs.deploy.result }}"
        echo ""
        
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deployment Successful!"
          echo "🔗 App URL: https://newscrawler.azurewebsites.net"
          echo "📅 Deployed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "✅ Next Steps:"
          echo "  • Verify application functionality"
          echo "  • Monitor logs for any issues" 
          echo "  • Check crawling performance"
          
          # Set success status
          exit 0
        else
          echo "❌ Deployment Failed!"
          echo ""
          echo "🔍 Troubleshooting:"
          echo "  • Check test results: ${{ needs.test-before-deploy.result }}"
          echo "  • Review build logs: ${{ needs.build.result }}"
          echo "  • Check deployment logs: ${{ needs.deploy.result }}"
          echo "  • Verify Azure service health"
          echo ""
          echo "🚨 Manual intervention required"
          
          # Set failure status
          exit 1
        fi

    - name: Create deployment badge
      if: needs.deploy.result == 'success'
      run: |
        echo "Creating deployment success badge..."
        echo "Badge: [![Deployment](https://img.shields.io/badge/deployment-success-brightgreen)](https://newscrawler.azurewebsites.net)"

  # Optional: Rollback capability
  rollback:
    name: 🔄 Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Rollback instructions
      run: |
        echo "🔄 Deployment failed - Rollback options:"
        echo "=================================="
        echo ""
        echo "Manual rollback steps:"
        echo "1. Go to Azure Portal"
        echo "2. Navigate to App Service 'newscrawler'"
        echo "3. Go to Deployment Center"
        echo "4. Select previous successful deployment"
        echo "5. Click 'Redeploy'"
        echo ""
        echo "Or run previous successful workflow manually"
