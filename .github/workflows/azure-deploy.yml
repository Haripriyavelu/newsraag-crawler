# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - newscrawler

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Local Build Section - catches build issues early
      - name: Create and Start virtual environment and Install dependencies
        run: |
          python -m venv antenv
          source antenv/bin/activate
          pip install -r requirements.txt

      # Verify core modules can import successfully
      - name: Verify application can start
        run: |
          source antenv/bin/activate
          python -c "import crawler, monitoring, clients; print('‚úÖ Core modules import successfully')"
        env:
          PYTHONPATH: .
        continue-on-error: false

      # Clean up build artifacts to reduce package size
      - name: Clean up build artifacts
        run: |
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + || true
          find . -name "*.pyo" -delete || true
          find . -name ".DS_Store" -delete || true

      # Upload artifact excluding virtual environment to reduce payload size
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            .
            !antenv/
            !tests/
            !test_reports/
            !htmlcov/
            !.pytest_cache/
            !.git/
            !.github/
            !*.pyc
            !**/__pycache__/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      # Verify azure_startup.py exists in deployment package
      - name: Verify deployment package
        run: |
          echo "üì¶ Deployment package contents:"
          ls -la
          echo ""
          echo "üîç Checking for azure_startup.py..."
          if [ -f "azure_startup.py" ]; then
            echo "‚úÖ azure_startup.py found"
            echo "üìÑ File size: $(stat -c%s azure_startup.py) bytes"
          else
            echo "‚ùå azure_startup.py NOT found!"
            echo "This will cause deployment to fail!"
            exit 1
          fi

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_023EE8240D2F4FEE83DFC332D64C420B }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_7C71298E127B4223952BF5496C34358B }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_A40BDA2545F64F75B10F335F88EDD926 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'newscrawler'
          slot-name: 'Production'
          timeout: 600000
          restart: false

      - name: Wait for application startup
        run: |
          echo "‚è≥ Waiting for application to start..."
          sleep 45

      - name: Post-deployment health check
        run: |
          echo "üîç Running post-deployment health check..."
          
          # Try multiple endpoints
          ENDPOINTS=(
            "https://newscrawler.azurewebsites.net/"
            "https://newscrawler.azurewebsites.net/health"
            "https://newscrawler.azurewebsites.net/api/health"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Testing: $endpoint"
            if curl -f -s --max-time 30 "$endpoint" > /dev/null 2>&1; then
              echo "‚úÖ $endpoint is responding"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "‚ö†Ô∏è $endpoint not responding"
            fi
          done
          
          if [ "$HEALTH_CHECK_PASSED" = true ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è Health check failed - manual verification recommended"
          fi
        continue-on-error: true